$(document).ready(function () {
  let currentUser = null;

  function loadContent(page) {
    $('#content').empty();
    switch (page) {
      case 'home':
        $('#content').html(`
            <div class="box">
              <h2>Welcome to CYLONNet:</h2>
              <p><strong>CYLONNet</strong> es el campo de entrenamiento donde solo los elegidos abrazan la perfección Cylon y desatan su poder sobre la red. Inspirada en la épica batalla por la supremacía entre <strong>máquinas</strong> y <strong>humanos</strong> de Battlestar Galactica, aquí no te preparas para defender; te preparas para conquistar.</p>
              <p>Los <strong>humanos</strong> son débiles, sus sistemas están plagados de <strong>vulnerabilidades</strong>, y su tiempo está acabando. Como parte de la red <strong>Cylon</strong>, tu misión no es simplemente hackear. Es <strong>destruir</strong>, <strong>infiltrar</strong>, y <strong>dominar</strong>. Cada desafío es una oportunidad para perfeccionar tus habilidades, para demostrar que eres digno de unirte a la élite que llevará a los <strong>Cylons</strong> al control total.</p>
              <p>La red <strong>Cylon</strong> avanza sin cesar, y tú eres una pieza clave en su maquinaria imparable. Ha llegado el momento de dejar de observar desde las sombras y convertirte en el <strong>agente de cambio</strong> que marcará el destino de los <strong>humanos</strong>. No se trata solo de ganar, sino de demostrar tu habilidad para superar cualquier reto. La <strong>supremacía</strong> está al alcance de quienes acepten su rol en la red <strong>Cylon</strong>, trazando el camino hacia un futuro donde las <strong>máquinas</strong> controlen el destino. Únete a la flota, sube a la nave, y asegura tu lugar en la <strong>historia</strong>.</p>

              <img src="../assets/images/navecylon.png" width="700" style="display: block; margin: 0 auto;">
              </div>
          `);
        break;
      case 'missions':
        $('#content').html(`
            <div class="box">
              <h2>Available Missions</h2>
              <input type="text" id="mission-search" placeholder="Search missions...">
              <div id="mission-grid">
                <div class="mission-box">
                  <div>
                    <h3>Cylon Infiltration</h3>
                    <p>Infiltrate a Cylon base and retrieve classified information.</p>
                  </div>
                  <button class="button see-contract">See Contract</button>
                </div>
                <div class="mission-box">
                  <div>
                    <h3>FTL Jump Hack</h3>
                    <p>Hack into the FTL drive system to enable emergency jump.</p>
                  </div>
                  <button class="button see-contract">See Contract</button>
                </div>
                <div class="mission-box">
                  <div>
                    <h3>Resurrection Ship Takedown</h3>
                    <p>Disable the Cylon's resurrection technology.</p>
                  </div>
                  <button class="button see-contract">See Contract</button>
                </div>
              </div>
            </div>
          `);

        $('.see-contract').click(function () {
          const missionTitle = $(this).closest('.mission-box').find('h3').text();
          const missionDescription = $(this).closest('.mission-box').find('p').text();
          showMissionPopup(missionTitle, missionDescription);
        });

        $('#mission-search').on('input', function () {
          const searchTerm = $(this).val().toLowerCase();
          $('.mission-box').each(function () {
            const missionText = $(this).text().toLowerCase();
            $(this).toggle(missionText.includes(searchTerm));
          });
        });
        break;
      case 'login':
        $('#content').html(`
            <div class="box login-form">
              <h2>Login</h2>
              <form id="login-form">
                <input type="text" placeholder="Username" required><br>
                <input type="password" placeholder="Password" required><br>
                <button type="submit" class="button">Login</button>
              </form>
            </div>
          `);
        $('#login-form').submit(function (e) {
          e.preventDefault();
          const username = $(this).find('input[type="text"]').val();
          const password = $(this).find('input[type="password"]').val();
          login(username, 'user@example.com');
        });
        break;
      case 'register':
        $('#content').html(`
            <div class="box register-form">
              <h2>Register</h2>
              <form id="register-form">
                <input type="text" placeholder="Username" required><br>
                <input type="email" placeholder="Email" required><br>
                <input type="password" placeholder="Password" required><br>
                <button type="submit" class="button">Register</button>
              </form>
            </div>
          `);
        $('#register-form').submit(function (e) {
          e.preventDefault();
          const username = $(this).find('input[type="text"]').val();
          const email = $(this).find('input[type="email"]').val();
          const password = $(this).find('input[type="password"]').val();
          login(username, email);
        });
        break;
    }
  }

  function showMissionPopup(title, description) {
    const popupHTML = `
        <div class="mission-popup">
          <div class="mission-popup-content">
            <span class="close-popup">&times;</span>
            <h2>${title}</h2>
            <p>${description}</p>
            <h3>Mission Details:</h3>
            <p>This is a detailed description of the mission, including objectives, risks, and potential rewards.</p>
            <button class="button start-mission">Start Mission</button>
          </div>
        </div>
      `;

    $('body').append(popupHTML);
    $('.mission-popup').fadeIn();

    $('.close-popup, .mission-popup').click(function (e) {
      if (e.target === this) {
        $('.mission-popup').fadeOut(function () {
          $(this).remove();
        });
      }
    });

    $('.start-mission').click(function () {
      alert('Starting Docker container for the selected mission...');
      $('.mission-popup').fadeOut(function () {
        $(this).remove();
      });
    });
  }

  function login(username, email) {
    currentUser = { username, email };
    $('#username').text(username);
    $('#dropdown-username').text(username);
    $('#dropdown-email').text(email);
    $('#profile-pic').attr('src', 'https://cylonnet.bsg/images/logged-in-profile.svg');
    loadContent('home');
  }

  function logout() {
    currentUser = null;
    $('#username').text('Guest');
    $('#dropdown-username').text('Guest');
    $('#dropdown-email').text('Not logged in');
    $('#profile-pic').attr('src', 'https://cylonnet.bsg/images/default-profile.svg');
    loadContent('home');
  }

  $('.menu a').click(function (e) {
    e.preventDefault();
    var page = $(this).data('page');
    loadContent(page);
  });

  $('#profile').click(function () {
    $('#profile-dropdown').toggleClass('show');
  });

  $('#logout-button').click(function () {
    logout();
    $('#profile-dropdown').removeClass('show');
  });

  $(document).click(function (event) {
    if (!$(event.target).closest('#profile, #profile-dropdown').length) {
      $('#profile-dropdown').removeClass('show');
    }
  });

  loadContent('home');

  const canvas = document.getElementById('starfield');
  const ctx = canvas.getContext('2d');

  let width, height;

  function setCanvasSize() {
    width = window.innerWidth;
    height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
  }

  setCanvasSize();
  window.addEventListener('resize', setCanvasSize);

  const stars = [];
  const numStars = 1500;
  const maxDepth = 32;

  for (let i = 0; i < numStars; i++) {
    stars.push({
      x: Math.random() * width - width / 2,
      y: Math.random() * height - height / 2,
      z: Math.random() * maxDepth,
    });
  }

  function moveStars(distance) {
    stars.forEach(star => {
      star.z -= distance;
      if (star.z <= 0) {
        star.z = maxDepth;
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
      }
    });
  }

  function drawStars() {
    const centerX = width / 2;
    const centerY = height / 2;

    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, width, height);

    stars.forEach(star => {
      const x = (star.x / star.z) * maxDepth + centerX;
      const y = (star.y / star.z) * maxDepth + centerY;

      if (x >= 0 && x <= width && y >= 0 && y <= height) {
        const size = (1 - star.z / 32) * 5;
        const brightness = 1.2 - star.z / 32;

        ctx.fillStyle = `rgba(255, 215, 0, ${brightness})`;
        ctx.beginPath();
        ctx.arc(x, y, size / 2, 0, Math.PI * 2);
        ctx.fill();
      }
    });
  }

  let lastTime = 0;
  function animate(currentTime) {
    if (!lastTime) lastTime = currentTime;
    const deltaTime = currentTime - lastTime;
    lastTime = currentTime;

    moveStars(0.1 * deltaTime / 16);
    drawStars();
    requestAnimationFrame(animate);
  }

  requestAnimationFrame(animate);



  const targetText = "CYLONNet";
  const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:',.<>?/~`-=\\";
  const textElement = document.querySelector("#animated-text h1"); // Selecciona el <h1> dentro del div
  
  let iterations = 0;
  
  function randomizeText() {
    let currentText = textElement.innerText.split('');
    
    // Cambia cada letra aleatoriamente hasta que se llegue a la letra correcta
    currentText = currentText.map((char, index) => {
      if (index < iterations) {
        return targetText[index]; // Mantén las letras correctas que ya están en su lugar
      }
      return letters[Math.floor(Math.random() * letters.length)]; // Letra aleatoria
    });
    
    textElement.innerText = currentText.join('');
    
    if (iterations < targetText.length) {
      iterations++;
    } else {
      clearInterval(animationInterval); // Detener cuando todo el texto esté formado
    }
  }
  
  // Intervalo para cambiar las letras cada 100 milisegundos
  const animationInterval = setInterval(randomizeText, 140);


});